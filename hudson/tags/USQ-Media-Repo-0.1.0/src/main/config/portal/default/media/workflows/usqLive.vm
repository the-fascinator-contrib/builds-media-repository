#macro(checkList $data)
  #foreach ($id in $data.keys())
    #set ($details = $data.get($id))
    #set ($psdata = "")
    #set ($psdisplay = "")
    #if ($details.get("psData") != $nullValue)
        #set ($psdata = $details.get("psData"))
        #set ($psdisplay = "(<b>" + $details.get("psData") + "</b>) ")
    #end
    <input type="checkbox" class="moodleCheckbox moodleCB$id" data-id="$id" data-ps="$psdata" name="$details.get("name")" /> $psdisplay$details.get("name")<br/>
  #end
#end

<form method="post" action="$portalPath/workflow">
  <fieldset class="login">
    <legend>Basic Metadata Input</legend>
    <p><b>Current workflow step</b>: '$self.getFormData('currentStepLabel')'
    <br/><b>Next workflow step</b>: '$self.getFormData('nextStepLabel')'</p>
    <p>This submission form is for items whose Copyright is owned by USQ. It is intended to streamline access to content by USQ students where no external parties are required to approve copyright access. Please use it accordingly; other content should be submitted through the 'DiReCt Copyright Management' workflow.</p>
    <input type="hidden" name="targetStep" value="$self.getFormData('nextStep')" />
    <input type="hidden" name="oid" value="$self.getFormData('oid')" />
    <input type="submit" name="submit" value="Submit" />
  </fieldset>
  <fieldset class="login required">
    <legend>Required Fields</legend>
    <p>
      <label for="title">Title:</label>
      <input type="text" name="title" value="$self.getFormData('title')" />
    </p>
    <p>
      <label for="description">Description:</label>
      <input type="text" name="description" value="$self.getFormData('description')" />
    </p>
    <h3>USQStudyDesk Courses currently assigned:</h3>
    <input type="hidden" name="moodleSecurity" id="moodleSecurity" value="$self.getFormData('moodleSecurity')" />
    <input type="hidden" name="psMoodle" id="psMoodle" value="$self.getFormData('psMoodle')" />
    <ul id="moodleCosmetic">
      <li>This object is not currently assigned to any courses.</li>
    </ul>
  </fieldset>
</form>

###################
###
### Excluded from the 'real' form because of the annoyances the checkboxes
###  cause in storing form data. They are instead dynamically summarized
###  into a single form field by the javascript at the end of the page.

<fieldset>
  <legend>Assign to USQStudyDesk</legend>
  #set ($username = $self.getUser())
  #set ($owner = $self.getOwner())
  <div class="grid_16 moodleCourses">

    ###################
    ##### The owner is using this screen
    #if ($username == $owner)
    <div class="grid_6">
      <div class="column">
        <h3>Your Access : ' $username ' (owner)</h3>
        #set ($data = $self.queryMoodle($username))
        #checkList($data)
      </div>
    </div>
    <div class="grid_1">&nbsp;</div>

    ###################
    ##### Someone else is using this screen
    #else
    <div class="grid_5">
      <div class="column">
        <h3>Your Access : ' $username '</h3>
        #set ($data = $self.queryMoodle($username))
        #checkList($data)
      </div>
    </div>
    <div class="grid_1">&nbsp;</div>

    <div class="grid_5">
      <div class="column">
        <h3>Owner's Access : ' $owner '</h3>
        #set ($data = $self.queryMoodle($owner))
        #checkList($data)
      </div>
    </div>
    <div class="grid_1">&nbsp;</div>

    ###################
    ##### Custom query
    #end
    <div class="grid_4">
      <div class="column">

        <div id="moodleOrphans">
          <h3>Other Courses</h3>
          <p>Other user's courses making use of this object:</p>
          <div id="moodleOrphanList">
          </div>
        </div>

        <h3>Custom Access</h3>
        <p>Using the search box below you can search for USQStudyDesk courses based on the UConnect name of lecturers/staff/students.</p>
        <input type="text" id="searchBox" /> <input type="button" id="searchButton" value="Search"/>
        <div class="hidden" id="loadingImage"><img src="$portalPath/images/loading-progress.gif" /></div>
        <div id="searchResultList">
        </div>
      </div>
    </div>
  </div>
</fieldset>

<script type="text/javascript">
$(function() {

    // Initialize the form
    formInit();
    function formInit() {
        var ids = $("#moodleSecurity").val();
        var idList = ids.split(",");
        var len = idList.length;
        var orphans = 0;
        for (var i = 0; i < len; i++) {
            if (idList[i] != "") {
                var checkBoxes = $(".moodleCB" + idList[i]);
                if (checkBoxes.length == 0) {
                    // Look up orphans
                    orphans++;
                    addCourse($("#moodleOrphanList"), idList[i]);
                } else {
                    $(".moodleCB" + idList[i]).click();
                }
            }
            sleep(0.5);
        }
        syncMoodle($);
    }

    // Sync form data to checkboxes
    function syncMoodle(jQ) {
        // Filter the list to unique IDs and Names
        var arr = []
        var names = []
        var psValues = []
        $(".moodleCheckbox:checked").each(function(index){
            var courseId = $(this).attr("data-id");
            var psData = $(this).attr("data-ps");
            var courseName = $(this).attr("name");
            if (jQ.inArray(courseId, arr) == -1) {
                arr.push(courseId);
                if (typeof(psData) != "undefined" && psData != "undefined" && psData != "") {
                    psValues.push(psData);
                }
                names.push(courseName);
            }
        });

        // Purge the existing data from the form
        $("#moodleSecurity").val("");
        $("#psMoodle").val("");
        $("#moodleCosmetic li").remove();

        // Build our new data
        var len = arr.length;
        var idString = "";
        var nameString = "";
        for (var i = 0; i < len; i++) {
            idString += arr[i] + ",";
            nameString += "<li>" + names[i] + " (" + arr[i] + ")</li>";
        }

        // Push the new data to the user interface
        $("#moodleSecurity").val(idString);
        $("#moodleCosmetic").append(nameString);
        // Fallback value for an empty list
        if (len == 0) {
            $("#moodleCosmetic").append("<li><i>This object is not currently assigned to any of <b>your</b> courses.</i></li>");
        }

        // Peoplesoft data is not always present
        len = psValues.length;
        var psString = "";
        for (var i = 0; i < len; i++) {
            psString += psValues[i] + ",";
        }
        $("#psMoodle").val(psString);

    }

    // Click event for searching
    $("#searchButton").click(function() {
        $("#searchResultList").html("");
        $("#loadingImage").show();
        jQuery.ajax({
            dataType: "json",
            type : "POST",
            url : "$portalPath/actions/moodle.ajax",
            success:
                function(data, status) {
                    $("#loadingImage").hide();
                    var keys = data.keys;
                    var len = keys.length;
                    // Loop through each course
                    for (var i = 0; i < len; i++) {
                        var courseId = keys[i];
                        var courseName = data.data[courseId].name;
                        var psData = data.data[courseId].psData;
                        // Check if we've got it somewhere already
                        var checkBoxes = $(".moodleCB" + courseId);
                        if (checkBoxes.length == 0) {
                            // Add new items into the orphan list (unchecked)
                            addCheckbox($("#moodleOrphanList"), courseId, courseName, psData, false);
                        } else {
                            $("#searchResultList").append("<br/>" + courseName + " (Already accessible)");
                        }
                    }
                },
            error:
                function (req, status, e) {
                    $("#loadingImage").hide();
                    $("#searchResultList").html(req.responseText);
                },
            data: {
                username: $("#searchBox").val(),
                verb: "queryMoodle"
            }
        });
    });

    // Click event for checkboxes - wrapped for dynamic insertion in addCheckbox()
    $(".moodleCheckbox").click(function() {
        cbClick($(this), $);
    });
    function cbClick(element, jQ) {
        // What course was clicked?
        var courseId = element.attr("data-id");
        var checked = element.attr("checked");
        // Set every other reference to this course to match
        jQ(".moodleCB" + courseId).each(function(index){
            $(this).attr("checked", checked);
        });
        // And sync the form data
        syncMoodle($);
    }

    // Add a checkbox to the provided element
    var cbTemplate = '<input type="checkbox" class="moodleCheckbox moodleCB%id%" data-id="%id%"data-ps="%ps%"  name="%name%" %checked%/> %psDisplay%%name%<br/>';
    function addCheckbox(element, courseId, courseName, psData, checked) {
        // Replace variables in the template
        var output = cbTemplate.replace(/%id%/g, courseId);
        output = output.replace(/%name%/g, courseName);
        output = output.replace(/%ps%/g, psData);
        if (typeof(psData) != "undefined" && psData != "undefined" && psData != "") {
            output = output.replace(/%psDisplay%/g, "(<b>" + psData + "</b>) ");
        } else {
            output = output.replace(/%psDisplay%/g, "");
        }
        if (checked) {
            output = output.replace(/%checked%/g, 'checked="checked"');
        } else {
            output = output.replace(/%name%/g, "");
        }
        // Add to the document
        element.append(output);
        // Attach a click event
        $(".moodleCB" + courseId).click(function() {
            cbClick($(this), $);
        });
    }

    // AJAX query for course name
    function addCourse(element, courseId) {
        jQuery.ajax({
            dataType: "json",
            type : "POST",
            url : "$portalPath/actions/moodle.ajax",
            success:
                function(data, status) {
                    // Add the checkbox
                    addCheckbox(element, courseId, jQuery.trim(data.name), jQuery.trim(data.psData), true);
                    syncMoodle($);
                },
            error:
                function (req, status, e) {
                    // We don't care
                },
            data: {
                courseId: courseId,
                verb: "getCourseName"
            }
        });
    }

    ## This is a hacky, blocking sleep designed to keep a single thread of
    ##   execution delayed until #1342 is addressed. The AJAX queries cannot
    ##   go too fast whilst that problem exists.
    function sleep(naptime){
        naptime = naptime * 1000;
        var sleeping = true;
        var now = new Date();
        var alarm;
        var startingMSeconds = now.getTime();
        while(sleeping){
            alarm = new Date();
            alarmMSeconds = alarm.getTime();
            if(alarmMSeconds - startingMSeconds > naptime){ sleeping = false; }
        }
    }
});
</script>
